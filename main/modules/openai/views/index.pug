extends ../../../common/_layout

block content
    .container
        h1.text-center.mb-4 OPENAI TESTER

        form#openaiForm(method='post' action='/gpt')
            .form-group
                label(for='model') Model
                select#model.form-control(name='model' required)
                    option(value='gpt-4-1106-preview' selected) gpt-4-1106-preview
                    option(value='gpt-4-1106-vision-preview') gpt-4-1106-vision-preview
                    option(value='gpt-4') gpt-4
                    option(value='gpt-4-32k') gpt-4-32k
                    option(value='gpt-3.5-turbo-1106') gpt-3.5-turbo-1106
                    option(value='gpt-3.5-turbo-instruct') gpt-3.5-turbo-instruct

            .form-group
                label(for='prompt') Prompt
                textarea#prompt.form-control(name='prompt' rows='6' required) Enter your prompt here

            .form-group
                label(for='maxTokens') Max Tokens (1 - 2048)
                input#maxTokens.form-control(type='number' name='maxTokens' value='100' min='1' max='2048' required)
                small.form-text.text-muted Maximum number of tokens to generate (1 - 2048)

            .form-group
                label(for='temperature') Temperature (0.0 - 1.0)
                input#temperature.form-control(type='number' step='0.01' name='temperature' value='0.7' min='0' max='1' required)
                small.form-text.text-muted Degree of randomness in responses (0.0 - 1.0)

            .form-group
                label(for='topP') Top P (0.0 - 1.0)
                input#topP.form-control(type='number' step='0.01' name='topP' value='1' min='0' max='1' required)
                small.form-text.text-muted Nucleus sampling cutoff (0.0 - 1.0)

            .form-group
                label(for='frequencyPenalty') Frequency Penalty (0.0 - 2.0)
                input#frequencyPenalty.form-control(type='number' step='0.01' name='frequencyPenalty' value='0' min='0' max='2' required)
                small.form-text.text-muted Penalty for new token based on frequency (0.0 - 2.0)

            .form-group
                label(for='presencePenalty') Presence Penalty (0.0 - 2.0)
                input#presencePenalty.form-control(type='number' step='0.01' name='presencePenalty' value='0' min='0' max='2' required)
                small.form-text.text-muted Penalty for new token based on presence (0.0 - 2.0)

            .form-group
                label(for='stop') Stop Sequence
                input#stop.form-control(type='text' name='stop' value='')
                small.form-text.text-muted Optional stopping sequence for generation

            .text-center
                button.btn.btn-primary(type='submit') Generate

            .loading-animation.text-center(style='display:none; margin-top:20px;')
                i.fas.fa-spinner.fa-spin

        pre.code-editor-bg#response(style='display:none; margin-top:20px;')

    script.
        document.getElementById('openaiForm').addEventListener('submit', function(event) {
            event.preventDefault();
            var form = this;
            document.querySelector('.loading-animation').style.display = 'block';
            document.getElementById('response').style.display = 'none';

            var formData = new FormData(form);
            var object = {};
            formData.forEach((value, key) => object[key] = value);
            var json = JSON.stringify(object);

            fetch(form.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: json
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                document.querySelector('.loading-animation').style.display = 'none';
                var responseElement = document.getElementById('response');
                responseElement.textContent = JSON.stringify(data, null, 2);
                responseElement.style.display = 'block';
            })
            .catch((error) => {
                console.error('Error:', error);
                document.querySelector('.loading-animation').style.display = 'none';
                document.getElementById('response').textContent = error.toString();
                document.getElementById('response').style.display = 'block';
            });
        });

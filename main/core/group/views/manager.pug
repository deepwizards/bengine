extends ../../../common/_layout

block content
    script(src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.development.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.development.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.27.2/axios.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js")
    #root
    script(type="text/babel").
        const { useState, useEffect } = React;

        const Item = ({ item, onAddToGroup }) => (
            <div>
                <span>{item._id}</span>
                <button onClick={() => onAddToGroup(item._id)}>Add to Group</button>
            </div>
        );

        const Group = ({ group, isSelected, onSelect }) => (
            <button 
                className={`list-group-item list-group-item-action${isSelected ? ' active' : ''}`}
                onClick={() => onSelect(group._id)}
            >
                {group.type}
            </button>
        );

        const App = () => {
            const [groups, setGroups] = useState([]);
            const [selectedGroup, setSelectedGroup] = useState(null);
            const [items, setItems] = useState([]);
            const [searchTerm, setSearchTerm] = useState('');
            const [currentPage, setCurrentPage] = useState(1);
            const itemsPerPage = 10;

            useEffect(() => {
                axios.get('/group/all').then(res => setGroups(res.data));
            }, []);

            const handleGroupClick = groupId => {
                setSelectedGroup(groupId);
                axios.get(`/group/${groupId}`).then(res => setItems(res.data));
            };

            const handleAddToGroup = itemId => {
                axios.post(`/group/${selectedGroup}/add/${itemId}`).then(() => {
                    setItems(items.filter(item => item._id !== itemId));
                    axios.get(`/group/${selectedGroup}`).then(res => setItems(res.data));
                });
            };

            const handleSearchChange = event => {
                setSearchTerm(event.target.value);
            };

            const paginatedItems = items
                .filter(item => item._id.includes(searchTerm))
                .slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

            const pageCount = Math.ceil(items.length / itemsPerPage);

            const handlePageChange = pageNum => setCurrentPage(pageNum);

            return (
                <div className="container">
                    <div className="row">
                        <div className="col-4">
                            <h2>Groups</h2>
                            <div className="list-group">
                                {groups.map(group => (
                                    <Group
                                        key={group._id}
                                        group={group}
                                        isSelected={selectedGroup === group._id}
                                        onSelect={handleGroupClick}
                                    />
                                ))}
                            </div>
                        </div>
                        <div className="col-8">
                            <h2>Items</h2>
                                <input
                                    type="text"
                                    className="form-control mb-3"
                                    placeholder="Search..."
                                    value={searchTerm}
                                    onChange={handleSearchChange}
                                />
                                {paginatedItems.map(item => (
                                    <Item
                                        key={item._id}
                                        item={item}
                                        onAddToGroup={handleAddToGroup}
                                    />
                                ))}
                                <nav aria-label="Page navigation example">
                                    <ul className="pagination">
                                        {[...Array(pageCount)].map((_, i) => (
                                            <li className={`page-item${currentPage === i + 1 ? ' active' : ''}`}>
                                                <button className="page-link" onClick={() => handlePageChange(i + 1)}>
                                                    {i + 1}
                                                </button>
                                            </li>
                                        ))}
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>
                );
            };

            ReactDOM.render(<App />, document.getElementById('root'));

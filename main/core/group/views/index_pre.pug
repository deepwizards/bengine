extends ../../../common/_layout

block content
    .container-fluid
        .row.mt-4
            .col-md-12
                .card.bg-dark.text-white
                    .card-body
                        a.btn.btn-primary.btn-sm(data-toggle='modal', data-target='#addGroupModal')
                            i.fas.fa-plus
                            span.ml-2 Add Group
                        a.btn.btn-secondary.btn-sm(href='#', onclick='addItems()') 
                            i.fas.fa-plus-circle
                            span.ml-2 Add Items
                        a.btn.btn-danger.btn-sm(href='#', onclick='removeItems()') 
                            i.fas.fa-minus-circle
                            span.ml-2 Remove Items

        .row
            .col-md-3
                .card.bg-dark.text-white
                    .card-header
                        h4 Groups
                    .card-body
                        ul.list-group.list-group-flush
                            each group, index in groups
                                li.list-group-item.bg-dark.text-white.py-1(onclick='selectGroup(this)', data-group-id=group._id)
                                    a(href='#', data-toggle="collapse", data-target=`#group${index}`)
                                        i.fas.fa-folder
                                        span.ml-2 #{group.name}


            .col-md-4
                .card.bg-dark.text-white
                    .card-header
                        h4 List
                    .card-body
                        each group, index in groups
                            .collapse(id=`group${index}`)
                                .card.bg-dark.text-white
                                    .card-header
                                        i.fas.fa-list
                                        span.ml-2 #{group.type}
                                    table.table.table-sm.table-dark
                                        thead
                                            tr
                                                th Name
                                                th Actions
                                        tbody
                                            each item in group.list
                                                tr
                                                    td
                                                        a(href=`/${group.type}/${item._id}`)
                                                            i.fas.fa-file
                                                            span.ml-2 #{item.name}
                                                    td
                                                        a.btn.btn-sm.btn-primary(href='#') 
                                                            i.fas.fa-edit
                                                        span.m-1
                                                        a.btn.btn-sm.btn-danger(href='#') 
                                                            i.fas.fa-trash

            .col-md-5
                .card.bg-dark.text-white
                    .card-header
                        h4 All Data
                        ul.nav.nav-tabs.card-header-tabs
                            each schema, index in schemas
                                li.nav-item
                                    a.nav-link(href=`#tab${index}`, data-toggle="tab", class=(schema=='Data'?'active':'')) #{schema}


                    .card-body(style='height: 70vh; overflow-y: scroll;')
                        .tab-content
                            each model, index in models
                                .tab-pane(id=`tab${index}`, class=(model.name=='Data'?'active':''))
                                    ul.list-group.list-group-flush
                                        each item in model.items
                                            li.list-group-item.bg-dark.text-white.py-1
                                                input(type='checkbox', id=`item${item._id}`)
                                                label.ml-2(for=`item${item._id}`)
                                                    i.fas.fa-file
                                                    span.ml-2 #{item.name}

        .modal.fade#addGroupModal(tabindex='-1', role='dialog')
            .modal-dialog(role='document')
                .modal-content.modal-dark
                    .modal-header
                        h5.modal-title Add New Group
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                        span(aria-hidden='true') &times;
                    .modal-body
                        form(action='/group', method='POST')
                            .form-group
                                label(for='groupName') Group Name
                                input#groupName.form-control(type='text', name='name', placeholder='Enter group name')
                            .form-group
                                label(for='groupDescription') Description
                                textarea#groupDescription.form-control(name='description', rows='3', placeholder='Enter group description')
                            .form-group
                                label(for='groupType') Type
                                select#groupType.form-control(name='type')
                                    each model in models
                                        option(value=model._id) #{model.name}
                            hr
                            button.btn.btn-primary(type='submit') Add Group

                    .modal-footer
                        button.btn.btn-secondary(type='button', data-dismiss='modal') Close
        script.
            let selectedGroupId;
            function selectGroup(element) {
                const allGroups = document.querySelectorAll('.list-group-item.bg-dark.text-white.py-1');
                allGroups.forEach(group => group.classList.remove('active'));
                element.classList.add('active');
                selectedGroupId = element.dataset.groupId;
            }
            function addItems() {
                const selectedGroup = document.querySelector('.list-group-item.bg-dark.text-white.py-1.active');
                if (!selectedGroup) {
                    alert('Please select a group first.');
                    return;
                }
                const groupId = selectedGroup.dataset.groupId;
                const checkboxes = document.querySelectorAll('.tab-content input[type="checkbox"]');
                const itemIds = Array.from(checkboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.id.replace('item', ''));
                fetch(`/group/${groupId}/items`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ itemIds }),
                }).then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    location.reload();
                })
                .catch(error => {
                    console.error('There has been a problem with your fetch operation:', error);
                });
            }
            function removeItems() {
                const selectedGroup = document.querySelector('.list-group-item.bg-dark.text-white.py-1.active');
                if (!selectedGroup) {
                    alert('Please select a group first.');
                    return;
                }
                const groupId = selectedGroup.dataset.groupId;
                const checkboxes = document.querySelectorAll(`#group${groupId} input[type="checkbox"]`);
                const itemIds = Array.from(checkboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.id.replace('item', ''));
                fetch(`/group/${groupId}/remove-items`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ itemIds }),
                }).then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    location.reload();
                })
                .catch(error => {
                    console.error('There has been a problem with your fetch operation:', error);
                });
            }

extends ../../../common/_layout

block content
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js')
    style.
        .jstree-clicked, .jstree-anchor:hover, .jstree-anchor:active {
            color: #000!important;
        }
    style.
        .scrowlable {
            height: 100%!important;
            overflow-y: scroll!imoprtant;
        }

    .container-fluid
        .row.mt-4
            .col-md-12
                .card.bg-dark.text-white
                    .card-body
                        a.btn.btn-primary.btn-sm(data-toggle='modal', data-target='#addGroupModal')
                            i.fas.fa-plus
                            span.ml-2 Add Group
                        a.btn.btn-secondary.btn-sm(href='#', onclick='addItems()') 
                            i.fas.fa-plus-circle
                            span.ml-2 Add Items
                        a.btn.btn-danger.btn-sm(href='#', onclick='removeItems()') 
                            i.fas.fa-minus-circle
                            span.ml-2 Remove Items

        .row
            .col-md-3
                .card.bg-dark.text-white
                    .card-header
                        h4 Groups
                    .card-body
                        ul.list-group.list-group-flush
                            each group, index in groups
                                li.list-group-item.bg-dark.text-white.py-1(onclick='selectGroup(this)', data-group-id=group._id)
                                    a(href='#', data-toggle="collapse", data-target=`#group${index}`)
                                        i.fas.fa-folder
                                        span.ml-2 #{group.name}
                                    a(href='#', onclick=`showGroupInfo('${group._id}')`)
                                        i.fas.fa-info-circle.ml-2


            .col-md-3
                .card.bg-dark.text-white
                    //- .card-header
                    //-     h4 List
                    .card-body(style='height: 79vh; padding: 0px;')
                        div#groupList

            .col-md-6
                .card.bg-dark.text-white
                    .card-header
                        h4 All Data
                        ul.nav.nav-tabs.card-header-tabs
                            each schema, index in schemas
                                li.nav-item(style="font-size: 0.8rem;")
                                    a.nav-link(href=`#tab${index}`, data-toggle="tab", class=(schema=='Data'?'active':'')) #{schema}


                    .card-body(style='height: 70vh; overflow-y: scroll;')
                        .tab-content
                            each model, index in models
                                .tab-pane(id=`tab${index}`, class=(model.name=='Data'?'active':''))
                                    ul.list-group.list-group-flush
                                        each item in model.items
                                            li.list-group-item.bg-dark.text-white.py-1
                                                input(type='checkbox', id=`item${item._id}`)
                                                label.ml-2(for=`item${item._id}`)
                                                    i.fas.fa-file
                                                    span(style="font-family: monospace; text-transform: capitalize;").ml-2 #{item.name}

    .modal.fade#addGroupModal(tabindex='-1', role='dialog')
        .modal-dialog(role='document')
            .modal-content.modal-dark
                .modal-header
                    h5.modal-title Add New Group
                    button.close(type='button', data-dismiss='modal', aria-label='Close')
                    span(aria-hidden='true') &times;
                .modal-body
                    form(action='/group', method='POST')
                        .form-group
                            label(for='groupName') Group Name
                            input#groupName.form-control(type='text', name='name', placeholder='Enter group name')
                        .form-group
                            label(for='groupDescription') Description
                            textarea#groupDescription.form-control(name='description', rows='3', placeholder='Enter group description')
                        .form-group
                            label(for='groupType') Type
                            select#groupType.form-control(name='type')
                                each model in models
                                    option(value=model._id) #{model.name}
                        hr
                        button.btn.btn-primary(type='submit') Add Group

                .modal-footer
                    button.btn.btn-secondary(type='button', data-dismiss='modal') Close

    .modal.fade#groupInfoModal(tabindex='-1', role='dialog')
        .modal-dialog(role='document')
            .modal-content.modal-dark
                .modal-header
                    h5.modal-title Group Info
                    button.close(type='button', data-dismiss='modal', aria-label='Close')
                    span(aria-hidden='true') &times;
                .modal-body
                    p#groupInfoName
                    p#groupInfoDescription
                    button#editButton.btn.btn-primary(type='button', data-dismiss='modal') Edit Group
                    button#deleteButton.btn.btn-danger(type='button', data-dismiss='modal') Delete Group

                .modal-footer
                    button.btn.btn-secondary(type='button', data-dismiss='modal') Close

    .modal.fade#editGroupModal(tabindex='-1', role='dialog')
        .modal-dialog(role='document')
            .modal-content.modal-dark
                .modal-header
                    h5.modal-title Edit Group
                    button.close(type='button', data-dismiss='modal', aria-label='Close')
                        span(aria-hidden='true') &times;
                .modal-body
                    form(action='/group/edit', method='POST')
                        .form-group
                            label(for='editGroupName') Group Name
                            input#editGroupName.form-control(type='text', name='name', placeholder='Enter group name')
                        .form-group
                            label(for='editGroupDescription') Description
                            textarea#editGroupDescription.form-control(name='description', rows='3', placeholder='Enter group description')
                        .form-group
                            label(for='editGroupType') Type
                            select#editGroupType.form-control(name='type')
                                each model in models
                                    option(value=model._id) #{model.name}
                        hr
                        button.btn.btn-primary(type='submit') Edit Group
                .modal-footer
                    button.btn.btn-secondary(type='button', data-dismiss='modal') Close

    .modal.fade#deleteGroupModal(tabindex='-1', role='dialog')
        .modal-dialog(role='document')
            .modal-content.modal-dark
                .modal-header
                    h5.modal-title Delete Group
                    button.close(type='button', data-dismiss='modal', aria-label='Close')
                        span(aria-hidden='true') &times;
                .modal-body
                    p Are you sure you want to delete this group?
                .modal-footer
                    button.btn.btn-danger(type='button', onclick='deleteGroup()') Delete
                    button.btn.btn-secondary(type='button', data-dismiss='modal') Cancel


    script.
        function showGroupInfo(groupId) {
            fetch(`/group/${groupId}`)
                .then(response => response.json())
                .then(group => {
                    document.querySelector('#groupInfoName').textContent = `Name: ${group.name}`;
                    document.querySelector('#groupInfoDescription').textContent = `Description: ${group.description}`;
                    $('#groupInfoModal').modal('show');
                })
                .catch(error => console.error('Error:', error));
        }

        let selectedGroupId;
        function selectGroup(element) {
            const allGroups = document.querySelectorAll('.list-group-item.bg-dark.text-white.py-1');
            allGroups.forEach(group => group.classList.remove('active'));
            element.classList.add('active');
            selectedGroupId = element.dataset.groupId;
            loadGroupList(selectedGroupId);
        }
        function addItems() {
            const selectedGroup = document.querySelector('.list-group-item.bg-dark.text-white.py-1.active');
            if (!selectedGroup) {
            alert('Please select a group first.');
            return;
            }
            const groupId = selectedGroup.dataset.groupId;
            const checkboxes = document.querySelectorAll('.tab-content input[type="checkbox"]');
            const itemIds = Array.from(checkboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.id.replace('item', ''));
            fetch(`/group/${groupId}/items`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ itemIds }),
            })
            .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            refreshItems(groupId);
            })
            .catch(error => {
            console.error('There has been a problem with your fetch operation:', error);
            });
        }
        function removeItems() {
            const selectedGroup = document.querySelector('.list-group-item.bg-dark.text-white.py-1.active');
            if (!selectedGroup) {
            alert('Please select a group first.');
            return;
            }
            const groupId = selectedGroup.dataset.groupId;
            const checkboxes = document.querySelectorAll(`#group${groupId} input[type="checkbox"]`);
            const itemIds = Array.from(checkboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.id.replace('item', ''));
            fetch(`/group/${groupId}/remove-items`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ itemIds }),
            })
            .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            refreshItems(groupId);            })
            .catch(error => {
            console.error('There has been a problem with your fetch operation:', error);
            });
        }

        function loadGroupList(groupId) {
            fetch(`/group/${groupId}`)
                .then(response => response.json())
                .then(group => {
                    const groupListDiv = document.querySelector('#groupList');
                    groupListDiv.innerHTML = '';

                    $('#groupList').jstree('destroy').jstree({
                        'core': {
                            'data': group.list.map(item => ({
                                'id': `item${item._id}`,
                                'text': item.name,
                                'a_attr': {
                                    'href': `/${group.type}/${item._id}`
                                },
                                'state': {
                                    'selected': false
                                },
                                'li_attr': {
                                    'value': item._id
                                },
                                    'type': 'file'
                                }))
                            },
                            'plugins': ['search', 'sort', 'wholerow', 'checkbox', 'types', 'contextmenu'],
                            'search': {
                                'show_only_matches': true
                            },
                            'sort': function(a, b) {
                                return this.get_text(a) > this.get_text(b) ? 1 : -1;
                            },
                            'types': {
                            'default': {
                                'icon': 'fa fa-folder'
                            },
                            'file': {
                                'icon': 'fa fa-file'
                            }
                        }
                    });
                })
                .catch(error => console.error('Error:', error));
            }

        //- function loadGroupList(groupId) {
        //-     fetch(`/group/${groupId}`)
        //-         .then(response => response.json())
        //-         .then(group => {
        //-             const groupListDiv = document.querySelector('#groupList');
        //-             groupListDiv.innerHTML = '';
        //-             const collapseDiv = document.createElement('div');
        //-             collapseDiv.classList.add('collapse', 'show');
        //-             collapseDiv.id = `group${group._id}`;
        //-             const cardDiv = document.createElement('div');
        //-             cardDiv.classList.add('card', 'bg-dark', 'text-white');
        //-             const cardHeaderDiv = document.createElement('div');
        //-             cardHeaderDiv.classList.add('card-header');
        //-             cardHeaderDiv.classList.add('scrowlable')
        //-             cardHeaderDiv.innerHTML = `<i class="fas fa-list"></i><span class="ml-2">${group.type}</span>`;
        //-             const table = document.createElement('table');
        //-             table.classList.add('table', 'table-sm', 'table-dark');
        //-             const thead = document.createElement('thead');
        //-             thead.innerHTML = '<tr><th>Filename</th></tr>';
        //-             const tbody = document.createElement('tbody');
        //-             group.list.forEach(item => {
        //-                 const tr = document.createElement('tr');
        //-                 tr.innerHTML = `<td><input type="checkbox" id="item${item._id}" value="${item._id}"><a href="/${group.type}/${item._id}"><i class="fas fa-file ml-2"></i><span style="font-family: 'Lexend!important', sans-serif;font-weight: '100'!important; text-transform: capitalize;" class="ml-2">${item.name}</span></a></td>`;
        //-                 tbody.appendChild(tr);
        //-             });
        //-             table.appendChild(thead);
        //-             table.appendChild(tbody);
        //-             cardDiv.appendChild(cardHeaderDiv);
        //-             cardDiv.appendChild(table);
        //-             collapseDiv.appendChild(cardDiv);
        //-             groupListDiv.appendChild(collapseDiv);
        //-         })
        //-         .catch(error => console.error('Error:', error));
        //- }

        function openEditGroupModal() {
            const selectedGroup = document.querySelector('.list-group-item.bg-dark.text-white.py-1.active');
            if (!selectedGroup) {
                alert('Please select a group first.');
                return;
            }
            const groupId = selectedGroup.dataset.groupId;
            console.log(`GroupId: ${groupId}`); // add this line to log groupId

            // fetch group data
            fetch(`/group/${groupId}`)
                .then(response => response.json())
                .then(group => {
                    console.log(group); // log group data
                    // Populate modal form with group's data...
                    document.getElementById('editGroupName').value = group.name;
                    document.getElementById('editGroupDescription').value = group.description;
                    document.getElementById('editGroupType').value = group.type;

                    // Hide the current modal and setup the event to show the new one
                    $('#groupInfoModal').on('hidden.bs.modal', function () {
                        $('#editGroupModal').modal('show');
                        $(this).off('hidden.bs.modal');
                    });
                    $('#groupInfoModal').modal('hide');
                })
                .catch(error => console.error('Error:', error));
        }


        $('#editButton').on('click', function () {
            const selectedGroup = document.querySelector('.list-group-item.bg-dark.text-white.py-1.active');
            if (!selectedGroup) {
                alert('Please select a group first.');
                return;
            }
            const groupId = selectedGroup.dataset.groupId;
            // Populate modal form with group's data...
            // Hide the current modal and setup the event to show the new one
            $('#groupInfoModal').on('hidden.bs.modal', function () {
                $('#editGroupModal').modal('show');
                $(this).off('hidden.bs.modal');
            });
            $('#groupInfoModal').modal('hide');
        });

        $('#deleteButton').on('click', function () {
            const selectedGroup = document.querySelector('.list-group-item.bg-dark.text-white.py-1.active');
            if (!selectedGroup) {
                alert('Please select a group first.');
                return;
            }
            const groupId = selectedGroup.dataset.groupId;
            // Hide the current modal and setup the event to show the new one
            $('#groupInfoModal').on('hidden.bs.modal', function () {
                $('#deleteGroupModal').modal('show');
                $(this).off('hidden.bs.modal');
            });
            $('#groupInfoModal').modal('hide');
        });

        function refreshItems(groupId) {
            fetch(`/group/${groupId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(group => {
                    const groupListDiv = document.querySelector('#groupList');
                    // Clear the existing items
                    while (groupListDiv.firstChild) {
                        groupListDiv.firstChild.remove();
                    }
                    // Rebuild the group list with the updated items
                    const collapseDiv = document.createElement('div');
                    collapseDiv.classList.add('collapse', 'show');
                    collapseDiv.id = `group${group._id}`;
                    const cardDiv = document.createElement('div');
                    cardDiv.classList.add('card', 'bg-dark', 'text-white');
                    const cardHeaderDiv = document.createElement('div');
                    cardHeaderDiv.classList.add('card-header');
                    cardHeaderDiv.classList.add('scrowlable')
                    cardHeaderDiv.innerHTML = `<i class="fas fa-list"></i><span class="ml-2">${group.type}</span>`;
                    const table = document.createElement('table');
                    table.classList.add('table', 'table-sm', 'table-dark');
                    const thead = document.createElement('thead');
                    thead.innerHTML = '<tr><th>Name</th></tr>';
                    const tbody = document.createElement('tbody');
                    group.list.forEach(item => {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `<td><input type="checkbox" id="item${item._id}" value="${item._id}"><a href="/${group.type}/${item._id}"><i class="fas fa-file ml-2"></i><span style="font-family: 'Lexend!important', sans-serif;font-weight: '100'!important; text-transform: capitalize;" class="ml-2">${item.name}</span></a></td>`;
                        tbody.appendChild(tr);
                    });
                    table.appendChild(thead);
                    table.appendChild(tbody);
                    cardDiv.appendChild(cardHeaderDiv);
                    cardDiv.appendChild(table);
                    collapseDiv.appendChild(cardDiv);
                    groupListDiv.appendChild(collapseDiv);
                })
                .catch(error => {
                    console.error('There has been a problem with your fetch operation:', error);
                });
        }


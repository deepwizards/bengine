script.
    $(document).ready(function() {
        const serviceDataTable = initializeDataTable('#serviceDataTable');
        const templateDataTable = initializeDataTable('#templateDataTable');
        appendHiddenTemplateInput();

        templateDataTable.on('click', 'tbody tr', function() {
            updateTemplateId($(this).data('template-id'));
        });

        let selectedData = [];
        let selectedDependencies = [];

        serviceDataTable.on('click', 'tbody tr', function() {
            handleRowSelection($(this), $(this).data('service-id'));
        });

        templateDataTable.on('click', 'tbody tr', function() {
            handleRowSelection($(this), null, $(this).data('template-id'));
        });

        $('#dataCard, #dependenciesCard').on('change', 'input[type-checkbox]', function() {
            handleCheckboxChange($(this));
        });

        $('#selectedDataList, #selectedDependenciesList').on('click', '.remove-item', function() {
            handleRemoveButtonClick($(this));
        });
    });

    function initializeDataTable(selector) {
        return $(selector).DataTable({
            scrollY: 300,
            scroller: true
        });
    }

    function appendHiddenTemplateInput() {
        $('form').append('<input type="hidden" name="template_id" id="template_id" />');
    }

    function updateTemplateId(templateId) {
        $('#template_id').val(templateId);
    }

    function handleRowSelection(row, serviceId, templateId = null) {
        const cardIds = ['#dataCard', '#dependenciesCard', '#loopsCard', '#outputCard'];
        row.siblings().removeClass('selected');
        row.addClass('selected');
        if (serviceId) {
            $('#templateCard').show();
            filterTemplatesByService(serviceId, templateId);
        }
        cardIds.forEach(id => $(id).show());
    }

    function filterTemplatesByService(serviceId) {
        const filteredData = templateDataTable
            .rows()
            .nodes()
            .to$()
            .filter(function() {
                return $(this).data('service') == serviceId;
            }).toArray();
        templateDataTable.clear();
        templateDataTable.rows.add(filteredData).draw();
    }

    function handleCheckboxChange(checkbox) {
        const type = checkbox.closest('.card').attr('id').replace('Card', '');
        const listSelector = `#selected${type.charAt(0).toUpperCase() + type.slice(1)}List`;
        const id = checkbox.data(`${type}-id`);
        if (checkbox.is(':checked')) {
            updateSelectedList(type, id, checkbox.next('label').text(), listSelector, true);
        } else {
            updateSelectedList(type, id, checkbox.next('label').text(), listSelector, false);
        }
    }

    function updateSelectedList(type, id, itemName, listSelector, add) {
        if (add) {
            selected[type].push(id);
            addToList(listSelector, id, itemName);
        } else {
            selected[type] = selected[type].filter(itemId => itemId !== id);
            removeFromList(listSelector, id);
        }
    }

    function addToList(listId, itemId, itemName) {
        const listItem = $('<li>').addClass('list-group-item').text(itemName).attr('data-id', itemId);
        const removeButton = $('<button>').addClass('btn btn-danger btn-sm float-right remove-item').text('Remove');
        listItem.append(removeButton);
        $(listId).append(listItem);
    }

    function removeFromList(listId, itemId) {
        $(`${listId} [data-id="${itemId}"]`).remove();
    }

    function handleRemoveButtonClick(button) {
        const itemId = button.closest('li').data('id');
        const listId = button.closest('ul').attr('id');
        removeFromList(`#${listId}`, itemId);
        updateCheckboxStatus(listId, itemId);
    }

    function updateCheckboxStatus(listId, itemId) {
        const type = listId.includes('Data') ? 'data' : 'dependencies';
        $(`input[data-${type}-id="${itemId}"]`).prop('checked', false);
    }

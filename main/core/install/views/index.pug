extends ../../../common/_layout

block content
    .container-fluid
        .row
            .col-md-6
                h2 Install Extension
                form(action="/install", method="post", enctype="multipart/form-data")
                    .form-group
                        label(for="extensionZip") Select ZIP File
                        input#extensionZip.form-control-file(type="file", name="extensionZip")
                    button.btn.btn-primary(type="submit") Install

            .col-md-6
                h2 Installed Modules and Services
                #installedExtensions

        script.
            document.addEventListener('DOMContentLoaded', function() {
                // Function to fetch and display installed modules and services
                async function fetchInstalledExtensions() {
                    try {
                        const response = await fetch('/api/extensions');
                        const { modules, services } = await response.json();
                        const extensionsContainer = document.getElementById('installedExtensions');
                        // Clear existing content
                        extensionsContainer.innerHTML = '';

                        // Populate modules
                        const modulesList = document.createElement('ul');
                        modules.forEach(module => {
                            const listItem = document.createElement('li');
                            listItem.textContent = module.name + ' - ' + module.description;
                            const uninstallButton = document.createElement('button');
                            uninstallButton.classList.add('btn', 'btn-danger', 'ml-2');
                            uninstallButton.textContent = 'Uninstall';
                            uninstallButton.onclick = () => uninstallExtension(module.name, 'module');
                            listItem.appendChild(uninstallButton);
                            modulesList.appendChild(listItem);
                        });
                        extensionsContainer.appendChild(modulesList);

                        // Populate services
                        const servicesList = document.createElement('ul');
                        services.forEach(service => {
                            const listItem = document.createElement('li');
                            listItem.textContent = service.name + ' - ' + service.description;
                            const uninstallButton = document.createElement('button');
                            uninstallButton.classList.add('btn', 'btn-danger', 'ml-2');
                            uninstallButton.textContent = 'Uninstall';
                            uninstallButton.onclick = () => uninstallExtension(service.name, 'service');
                            listItem.appendChild(uninstallButton);
                            servicesList.appendChild(listItem);
                        });
                        extensionsContainer.appendChild(servicesList);
                    } catch (error) {
                        console.error('Error fetching installed extensions:', error);
                    }
                }

                // Function to uninstall a module or service
                async function uninstallExtension(extensionName, type) {
                    try {
                        const response = await fetch('/uninstall', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ extensionName, type })
                        });
                        const result = await response.json();
                        if (result.success) {
                            fetchInstalledExtensions(); // Refresh list
                        } else {
                            alert('Uninstallation failed: ' + result.message);
                        }
                    } catch (error) {
                        alert('Error during uninstallation: ' + error.message);
                    }
                }

                // Initial fetch of installed extensions
                fetchInstalledExtensions();
            });

extends ../../../common/_layout

block content
    .container-fluid
        //- Notifications Section
        if data2.blockedJobs > 0 || data2.blockedFlows > 0
            .alert.alert-danger.alert-dismissible.fade.show.mt-4(role="alert")
                strong Warning!
                span.ml-2 There are #{data2.blockedJobs} blocked jobs and #{data2.blockedFlows} blocked flows.
                button.close(type="button" data-dismiss="alert" aria-label="Close")
                    span(aria-hidden="true") &times;

        //- Search Bar
        .row.mt-4
            .col-md-12
                form
                    .input-group
                        input.form-control(type="text" placeholder="Search jobs, flows, projects...")
                        .input-group-append
                            button.btn.btn-outline-secondary(type="submit") Search

        //- Chart Section
        .row.mt-4
            .col-md-12
                canvas#chart(width="400" height="200")
        .row.mt-4
            .col-md-12
                .btn-toolbar
                    button.btn.btn-primary.mr-2(type="button") Create New Project
                    button.btn.btn-primary.mr-2(type="button") View All Projects
                    button.btn.btn-primary.mr-2(type="button") Create New Flow
                    button.btn.btn-primary(type="button") View All Flows

        //- Projects, Flows, and Jobs Sections
        mixin largeBadge(label, value)
            .badge.badge-pill.badge-highlight.mr-2
                | #{label}: #{value}

        mixin smallBadge(label, value)
            .badge.badge-pill.badge-info.mr-2
                | #{label}: #{value}

        mixin section(sectionId, sectionTitle, sectionData, sectionTotals)
            .row(class=sectionId)
                .col-md-12
                    h4= sectionTitle
                    +largeBadge('Total Cost', `$${sectionTotals.totalCost.toFixed(2)}`)
                    +largeBadge('Total Time', `${sectionTotals.totalTime} min`)
                    +smallBadge('Total # of (A/B/C)', sectionTotals.totalCount)
                    +smallBadge('# of Outputs', sectionTotals.outputs)
                    +smallBadge('Est. cost of remaining', `$${sectionTotals.estimatedCost.toFixed(2)}`)
                    +smallBadge('Completed by Week', sectionTotals.completedByWeek)
                    +smallBadge('Completed by Month', sectionTotals.completedByMonth)
                    +smallBadge('Completed by Year', sectionTotals.completedByYear)
                    +smallBadge('Completed All Time', sectionTotals.completedAllTime)
                    .card.mb-4
                        .card-body
                            each item in sectionData
                                h5.card-title
                                    i(class=`fas ${item.icon} mr-2`)
                                    | #{item.name}
                                +largeBadge('Count', item.count)

        +section('projects-section', 'Projects', data2.projectsStatuses, data2.projectsTotals)
        +section('flows-section', 'Flows', data2.flowsStatuses, data2.flowsTotals)
        +section('jobs-section', 'Jobs', data2.jobsStatuses, data2.jobsTotals)

        //- Recent Outputs Section
        .row.recent-outputs-section
            .col-md-12
                .card.mb-4
                    .card-header
                        h5 Recent Outputs
                    ul.list-group.list-group-flush
                        each output in data2.recentOutputs
                            li.list-group-item
                                a(href=output.link) #{output.name}

        //- Job Service Queue Section
        .row.job-service-queue-section
            .col-md-12
                .card
                    .card-header
                        h5 Job Service Queue
                    ul.list-group.list-group-flush
                        each jobID in data2.jobServiceQueue
                            li.list-group-item #{jobID}

    script.
        // Chart data and configuration
        const ctx = document.getElementById('chart').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: !{JSON.stringify(data2.chartLabels)},
                datasets: [{
                    label: 'Number of Jobs',
                    data: !{JSON.stringify(data2.chartData)},
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });


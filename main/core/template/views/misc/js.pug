script.
    document.addEventListener("DOMContentLoaded", () => {
        const currentProjectId = "#{currentTemplateId}";
        highlightCurrentProject(currentProjectId);
        expandActiveGroups();
        setupGroupHeaderToggle();
        setupTemplateActions();
        //- setupBlockActions();
        setupServiceTestActions();
        setupVersionControlActions();
    });

    function highlightCurrentProject(currentProjectId) {
        document.querySelectorAll("li.list-group-item").forEach(item => {
            const link = item.querySelector("a");
            if (link && link.href.endsWith(`/project/${currentProjectId}`)) {
                item.classList.add("bg-active");
            }
        });
    }

    function expandActiveGroups() {
        document.querySelectorAll(".group-body").forEach(group => {
            if (Array.from(group.querySelectorAll("li.list-group-item.bg-active")).length) {
                new bootstrap.Collapse(group, { toggle: false }).show();
            }
        });
    }

    function setupGroupHeaderToggle() {
        $(document).ready(() => {
            $('.group-header').on('click', function() {
                const target = $(this).data('target');
                $(target).toggleClass('show');
            });
        });
    }

    function setupTemplateActions() {
        const templateId = document.querySelector('#tid').value;
        const blocksContainer = document.querySelector('#blocksContainer');
        const blocksTable = document.getElementById('dataTable');

        setupBlockSelection(blocksTable);
        setupAddBlockButton(templateId);
        setupUseSelectedBlockButton(templateId, blocksTable);
        setupBlockCardsActions(templateId);
    }

    function setupBlockSelection(blocksTable) {
        let selectedRow;
        blocksTable.addEventListener('click', (e) => {
            const row = e.target.closest('tr');
            if (row) {
                if (selectedRow) selectedRow.classList.remove('bg-active');
                row.classList.add('bg-active');
                selectedRow = row;
            }
        });
    }

    function setupAddBlockButton(templateId) {
        document.getElementById('addBlockButton').addEventListener('click', async () => {
            const selectedType = blockTypeSelector.value;
            await modifyBlock(templateId, { type: selectedType }, "Error adding block. Please try again.");
        });
    }

    function setupUseSelectedBlockButton(templateId, blocksTable) {
        document.getElementById('useSelectedBlockButton').addEventListener('click', async () => {
            const selectedBlockId = blocksTable.querySelector('tr.bg-active')?.dataset.blockId;
            if (!selectedBlockId) {
                alert("Please select a block.");
                return;
            }
            await modifyBlock(templateId, { blockId: selectedBlockId }, "Error adding block. Please try again.");
        });
    }

    async function modifyBlock(templateId, data, errorMessage) {
        try {
            const response = await fetch(`/template/edit/${templateId}/block`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (result.success) location.reload();
            else alert(result.message);
        } catch (error) {
            alert(errorMessage);
        }
    }

    function setupBlockCardsActions(templateId) {
        document.querySelectorAll('.blockCard').forEach(blockCard => {
            const blockId = blockCard.getAttribute('data-block-id');
            const textarea = blockCard.querySelector(`textarea[name='blockBody_${blockId}']`);
            const blockNameInput = blockCard.querySelector(`input[name='blockName_${blockId}']`);

            textarea.addEventListener('change', () => updateBlock(templateId, blockId, { body: textarea.value }));
            blockNameInput.addEventListener('change', () => updateBlock(templateId, blockId, { name: blockNameInput.value }));
        });
    }

    async function updateBlock(templateId, blockId, updatedFields) {
        try {
            const response = await fetch(`/template/edit/${templateId}/block/${blockId}/update`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedFields)
            });
            const result = await response.json();
            if (!result.success) alert(result.message);
        } catch (error) {
            alert("Error updating block. Please try again.");
        }
    }

    function setupServiceTestActions() {
        const testServiceButton = document.getElementById('testServiceButton');
        const responseDataContainer = document.getElementById('responseDataContainer');
        const testHistoryList = document.getElementById('testHistoryList');

        testServiceButton.addEventListener('click', () => testService(testServiceButton, responseDataContainer, testHistoryList));
        testHistoryList.addEventListener('click', handleTestHistoryClick);
    }

    function setupVersionControlActions() {
        const templateId = document.querySelector('#tid').value;
        $('#lockButton').click(() => toggleTemplateLock(templateId, true));
        $('#unlockButton').click(() => toggleTemplateLock(templateId, false));
        $('#saveVersionButton').click(() => saveTemplateVersion(templateId));
        $('#loadVersionButton').click(() => loadTemplateVersion(templateId));
    }

    function toggleTemplateLock(templateId, isLocked) {
        fetch(`/template/${isLocked ? 'lock' : 'unlock'}/${templateId}`, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                console.log(`Template ${isLocked ? 'locked' : 'unlocked'}:`, data);
                $(':input').prop('disabled', isLocked);
            })
            .catch(error => console.error('Error:', error));
    }

    function saveTemplateVersion(templateId) {
        const data = { /* version data */ };
        fetch(`/template/version/${templateId}/save`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => console.log('New version saved:', data))
        .catch(error => console.error('Error:', error));
    }

    function loadTemplateVersion(templateId) {
        const versionId = 'version-id-to-load'; // Replace with actual version ID
        fetch(`/template/version/${templateId}/load/${versionId}`)
            .then(response => response.json())
            .then(data => console.log('Version loaded:', data))
            .catch(error => console.error('Error:', error));
    }

    async function testService(button, responseDataContainer, testHistoryList) {
        const templateId = button.dataset.id;
        try {
            const response = await fetch(`/template/test/${templateId}`, { method: 'GET', headers: { 'Content-Type': 'application/json' } });
            const data = await response.json();
            responseDataContainer.textContent = JSON.stringify(data, null, 2);
            prependTestHistoryItem(testHistoryList, data);
        } catch (error) {
            responseDataContainer.textContent = `Error: ${error.message}`;
        }
    }

    function prependTestHistoryItem(testHistoryList, data) {
        const newTestItem = document.createElement('li');
        newTestItem.classList.add('list-group-item', 'test-history-item');
        newTestItem.setAttribute('data-toggle', 'modal');
        newTestItem.setAttribute('data-target', '#testDetailsModal');
        newTestItem.setAttribute('data-id', data.testId);
        newTestItem.textContent = `| Time: ${data.created_at} | Template Version: ${data.template_version} | Template ID: ${data.template_id}`;
        testHistoryList.prepend(newTestItem);
    }

    function handleTestHistoryClick(event) {
        if (event.target.classList.contains('test-history-item')) {
            const testId = event.target.dataset.id;
            fetchTestDetails(testId);
            event.stopPropagation(); // Add this line to stop event propagation
        }
    }

    function fetchTestDetails(testId) {
        const responseDataContainer = document.getElementById('responseDataContainer'); // Get the response data container

        fetch(`/template/test/details/${testId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data && data.data.result) {
                    // Assuming 'result' is a field in the test object
                    // Also assuming 'result' is already a JSON string
                    responseDataContainer.textContent = JSON.stringify(JSON.parse(data.data.result), null, 2);
                } else {
                    responseDataContainer.textContent = 'No result data available';
                }
            })
            .catch(error => {
                    responseDataContainer.textContent = `Error: ${error.message}`;
            });
    }


